package main

import (
	"fmt"
	"github.com/jakecoffman/cp"
	_ "image/png"
	"math"
)

const width = 800
const height = 600
const boxWidth = 10
const boxHeight = 80


type Box struct {
	x, y float64
	w, h float64
	r    float64
}

var space *cp.Space // Simulation space

func main() {
	space = cp.NewSpace()
	space.SetGravity(cp.Vector{0, 100})

	addFloor()
	addBoxToPhysics(Box{
		x: width / 2,
		y: 0,
		w: 20,
		h: 100,
	})

	// Debugging.
	steps := 2000
	for i:=0; i < steps; i++ {
		fmt.Printf("--- STEP %d\n", i)
		space.Step(1.0/60.0)
		space.EachBody(func(body *cp.Body) {
			switch body.UserData {
			case "box":
				fmt.Printf("(%.2f/%.2f);%.2f\n", body.Position().X, body.Position().Y, body.Rotation().ToAngle())
			}
		})
	}
}


func addFloor() {
	floorHeight := 100.0
	bf := cp.NewStaticBody()
	bf.SetPosition(cp.Vector{width / 2, height + floorHeight/2})
	sf := cp.NewBox(bf, width, floorHeight, 0.0)
	space.AddBody(bf)
	space.AddShape(sf)
}

func addBoxToPhysics(box Box) *cp.Body {
	body := cp.NewBody(1000.0, 1)
	body.SetPosition(cp.Vector{X: box.x, Y: box.y})
	body.UserData = "box"
	rad := 45 * 180 / math.Pi
	body.SetAngle(rad)

	shape := cp.NewBox(body, box.w, box.h, 0.0)
	space.AddBody(shape.Body())
	space.AddShape(shape)
	return body
}

